{"id":"ejercicios/prototype.html","dependencies":[{"name":"D:\\Utilities\\E-Learning\\Platzi\\Cursos\\Curso_Profesional_de_Javascript\\package.json","includedInParent":true,"mtime":1617058140963}],"generated":{"html":"<html>\n  <head>\n    <title>Prototype</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script>// Un objeto común y corriente\n// const zelda = {\n//   name: 'Zelda',\n// };\n// zelda.saludar = function() {\n//   console.log(`Hola soy ${this.name}`);\n// };\n// zelda.saludar();\n// const link = {\n//   name: 'Link',\n// };\n// link.saludar = function() {\n//   console.log(`Hola soy ${this.name}`);\n// };\n// link.saludar();\n// Seamos un poco más eficientes\n// function Hero(name) {\n//   const hero = {\n//     name: name,\n//   };\n//   hero.saludar = function() {\n//     console.log(`Hola soy ${this.name}`);\n//   };\n//   return hero;\n// }\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// Aun podemos mejorar más y evitar tener que crear la misma función cada vez\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Me llamo ${this.name}`);\n//   },\n// };\n// function Hero(name) {\n//   const hero = {\n//     name: name,\n//   };\n//   hero.saludar = heroMethods.saludar;\n//   return hero;\n// }\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// Object.create\n// const nuevoObjeto = Object.create(objeto)\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Soy superheroe! ${this.name}`);\n//   },\n// };\n// function Hero(name) {\n//   const hero = Object.create(heroMethods);\n//   hero.name = name;\n//   return hero;\n// }\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// Los métodos de hero dentro de Hero\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Soy superheroe! ${this.name}`);\n//   },\n// };\n// function Hero(name) {\n//   const hero = Object.create(Hero.prototype);\n//   hero.name = name;\n//   return hero;\n// }\n// Hero.prototype.saludar = function() {\n//   console.log(`Soy superheroina! ${this.name}`);\n// };\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// new es un atajo (azucar sintactica) para llevar Hero.prototype al objeto que estamos creando\n// function Hero(name) {\n// this = Object.create(Hero.prototype);\n// this.name = name;\n// return this;\n// }\n// Hero.prototype.saludar = function() {\n//   console.log(`New: ${this.name}`);\n// };\n// const zelda = new Hero('Zelda');\n// zelda.saludar();\n// const link = new Hero('Link');\n// link.saludar();\nfunction Carro(comando) {\n  this.comando = comando;\n}\n\nCarro.prototype.accelerar = function () {\n  console.log(`El auto va a ${this.comando}`);\n};\n\nconst sprint = new Carro('accelerar');\nsprint.accelerar();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"0b1da460686afcb565817fcf510df202","cacheData":{"env":{}}}